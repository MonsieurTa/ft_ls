Avoir deux structures differentes :
Structure fichier :
- dirent       (infos sur le fichier)
- lstat        (autres infos sur le fichier)
- etc, encore plus d'infos sur le fichier si besoin
/!\ LE FICHIER N'A PAS BESOIN DE CONNAITRE SON PATH, TOUT EST GERE PAR LA FONCTION RECURSIVE /!\
Structure liste chainee :
- file         (pointeur sur structure de fichier)
- next

Simplifier la fonction recursive dans l'ordre elle doit :
- Recuperer tous les fichier du nom du dossier passe en param
- Trier ces fichiers
- Afficher les infos de ces fichiers
- Pour chaques dossier dans la liste des fichiers la fonction
        s'appelle elle meme avec un join du nom du dossier passe en param + le nom du dossier actuel
- Free la liste des fichiers

La fonction ls_append ne doit pas prendre un pointeur sur maillon de liste chaine, seulement un maillon.
Pour opti, faire un push front plutot qu'un push back ? Si pas possible garder en memoire le dernier element de la liste
pour ne pas avoir a la reparcourir a chaque ajout.

La fonction ls_mergesort doit prendre un pointeur sur fonction en parametre pour le tri. Cette fonction prendra
deux pointeurs sur structure de fichier.

Nom plus explicite pour print_name.

Suggestion de norme personelle pour le projet :
- toujours effectuer des comparaisons explicites, par exemple interdit de if(ptr) pour tester si il vaut NULL ou non
        utiliser == NULL ou != NULL, meme chose pour les chaines de caractere.
- Ne pas utiliser 0 (la valeur) pour tester '\0' (le char) dans les chaines de caracteres.
- Ne pas utiliser de ++index a l'interieur des whiles (while (++index < val)), le faire sur une ligne a part.
/!\ Cette norme est contournable s'il faut economiser des lignes pour complier a la norme 42 /!\

Proposition de la structure de l'arborescence git :
master
^
|
dev
^                         ^
| (base sur)              | (base sur)
dev_feature1              dev_feature2
^          ^              ^          ^
| (local)  | (local)      | (local)  | (local)
wta        fwerner        wta        fwerner
